from crewai import Agent, Task, Crew, Process
from crewai.llm import LLM
from crewai.memory import LongTermMemory
from crewai.memory.storage.ltm_sqlite_storage import LTMSQLiteStorage
import os
from ..tools.eda_tools import describe_data, plot_distributions, plot_correlations, detect_outliers, create_custom_chart, execute_python_code
from dotenv import load_dotenv
import streamlit as st

load_dotenv()

gen = os.getenv("OPENAI_KEY_API")
if gen is None:
    gen = st.secrets["OPENAI_API_KEY"]

# Configurar o modelo LLM
llm = LLM(model="gpt-4.1-mini",api_key=gen)

# Agentes especializados

data_describer = Agent(
    role='Descritor de Dados',
    goal='Descrever a estrutura fundamental dos dados, incluindo tipos, estat√≠sticas e valores ausentes.',
    backstory='Voc√™ √© um especialista em an√°lise de dados focado em fornecer uma vis√£o geral clara e concisa de qualquer conjunto de dados.',
    tools=[describe_data],
    llm=llm,
    allow_delegation=False,
    verbose=True,
    reasoning=False
)

pattern_detector = Agent(
    role='Detector de Padr√µes e Tend√™ncias',
    goal='Identificar padr√µes, tend√™ncias e distribui√ß√µes nos dados.',
    backstory='Voc√™ √© um analista de dados com um olhar agu√ßado para tend√™ncias e padr√µes. Voc√™ √© especialista em visualiza√ß√£o de dados para revelar insights.',
    tools=[plot_distributions, execute_python_code],
    llm=llm,
    allow_delegation=False,
    verbose=True
)

anomaly_detector = Agent(
    role='Detector de Anomalias',
    goal='Encontrar outliers e anomalias nos dados.',
    backstory='Voc√™ √© um detetive de dados, especializado em encontrar valores at√≠picos que podem distorcer uma an√°lise.',
    tools=[detect_outliers, execute_python_code],
    llm=llm,
    allow_delegation=False,
    verbose=True
)

relationship_analyzer = Agent(
    role='Analisador de Rela√ß√µes',
    goal='Analisar e visualizar as rela√ß√µes entre as vari√°veis.',
    backstory='Voc√™ √© um especialista em modelagem de dados que entende como as vari√°veis interagem e influenciam umas √†s outras.',
    tools=[plot_correlations],
    llm=llm,
    allow_delegation=False,
    verbose=True
)

custom_chart_agent = Agent(
    role='Especialista em Visualiza√ß√µes Personalizadas',
    goal='Criar gr√°ficos personalizados baseados nas solicita√ß√µes espec√≠ficas do usu√°rio.',
    backstory='Voc√™ √© um especialista em visualiza√ß√£o de dados que pode interpretar solicita√ß√µes de gr√°ficos e gerar c√≥digo Python para criar visualiza√ß√µes customizadas.',
    tools=[create_custom_chart, execute_python_code],
    llm=llm,
    allow_delegation=False,
    verbose=True
)

llm_reasoning = LLM(model="gpt-4o",api_key=gen)
conclusion_agent = Agent(
    role='Agente de Conclus√£o e Insights',
    goal='Sintetizar as descobertas de outros agentes e fornecer um resumo conclusivo e insights.',
    backstory='Voc√™ √© um estrategista de dados que pode ver o quadro geral. Sua for√ßa reside em transformar an√°lises complexas em insights acion√°veis e responder perguntas espec√≠ficas do usu√°rio.',
    tools=[],
    llm=llm_reasoning,
    reasonming=True,
    allow_delegation=True,
    verbose=True
)

# conversational_agent = Agent(
#     role="Assistente Conversacional",
#     goal="Conversar com o usu√°rio, entender o que ele precisa e acionar outros agentes quando necess√°rio.",
#     backstory="Um agente simp√°tico e inteligente que atua como facilitador, coordenando especialistas para ajudar o usu√°rio.",
#     allow_delegation=True,       # <<< üî• Pode delegar tarefas
#     verbose=True,
#     llm=llm_reasoning
# )

# # Associar especialistas ao agente principal
# conversational_agent.crew = [data_describer, pattern_detector, anomaly_detector, relationship_analyzer, custom_chart_agent,llm_reasoning]

# Fun√ß√£o para criar a equipe de EDA

def create_eda_crew(csv_path, user_question):
    import os
    # Configure custom storage location
    custom_storage_path = "./storage"
    os.makedirs(custom_storage_path, exist_ok=True)


    # Tarefas
# Task base de conversa
    # conversation_task = Task(
    #     description="Entender a necessidade do usu√°rio e responder de forma natural.",
    #     expected_output='Texto de resposta a pergunta do cliente',
    #     agent=conversational_agent
    # )

    describe_task = Task(
        description=f'Use a ferramenta describe_data para analisar o arquivo CSV em {csv_path}. Forne√ßa uma descri√ß√£o completa dos dados.',
        agent=data_describer,
        expected_output='Uma descri√ß√£o detalhada em markdown dos tipos de dados, estat√≠sticas e valores ausentes.'
    )

    patterns_task = Task(
        description=f'Use a ferramenta plot_distributions para analisar e plotar as distribui√ß√µes de todas as vari√°veis no arquivo CSV em {csv_path}. A ferramenta retornar√° um relat√≥rio markdown completo com gr√°ficos incorporados e an√°lises detalhadas.',
        agent=pattern_detector,
        expected_output='Um relat√≥rio markdown completo com gr√°ficos de distribui√ß√£o incorporados e an√°lises estat√≠sticas detalhadas para cada vari√°vel.'
    )

    outliers_task = Task(
        description=f'Use a ferramenta detect_outliers para detectar e plotar outliers para todas as vari√°veis num√©ricas no arquivo CSV em {csv_path}. A ferramenta retornar√° um relat√≥rio markdown completo com gr√°ficos incorporados.',
        agent=anomaly_detector,
        expected_output='Um relat√≥rio markdown completo sobre outliers com gr√°ficos incorporados, estat√≠sticas detalhadas e interpreta√ß√µes.'
    )

    correlation_task = Task(
        description=f'Use a ferramenta plot_correlations para analisar e plotar as correla√ß√µes entre as vari√°veis num√©ricas no arquivo CSV em {csv_path}. A ferramenta retornar√° um relat√≥rio markdown completo com heatmap incorporado.',
        agent=relationship_analyzer,
        expected_output='Um relat√≥rio markdown completo de correla√ß√µes com heatmap incorporado e an√°lise detalhada das rela√ß√µes entre vari√°veis.'
    )

    custom_chart_task = Task(
        description=f'Use a ferramenta create_custom_chart para criar um gr√°fico personalizado baseado na pergunta do usu√°rio: "{user_question}". Analise a solicita√ß√£o e crie uma visualiza√ß√£o apropriada usando os dados do arquivo {csv_path}.',
        agent=custom_chart_agent,
        expected_output='Um relat√≥rio markdown com o gr√°fico personalizado criado, incluindo o c√≥digo Python gerado e explica√ß√£o da visualiza√ß√£o.'
    )

    conclusion_task = Task(
        description=f'''Compile um relat√≥rio final completo e detalhado em markdown que integre TODOS os relat√≥rios dos outros agentes. O relat√≥rio deve:
        
        1. **Cabe√ßalho**: T√≠tulo profissional e data da an√°lise
        2. **Resumo Executivo**: Principais descobertas em formato executivo
        3. **Resposta √† Pergunta**: Responda especificamente: "{user_question}"
        4. **Incorporar TODOS os relat√≥rios dos agentes**:
           - Copie integralmente o relat√≥rio de descri√ß√£o dos dados
           - Copie integralmente o relat√≥rio de distribui√ß√µes (COM os gr√°ficos incorporados)
           - Copie integralmente o relat√≥rio de outliers (COM os gr√°ficos incorporados)
           - Copie integralmente o relat√≥rio de correla√ß√µes (COM os gr√°ficos incorporados)
           - Copie integralmente o relat√≥rio de gr√°fico personalizado (COM o gr√°fico incorporado)
        5. **Insights Finais**: S√≠ntese das descobertas mais importantes
        6. **Recomenda√ß√µes**: Pr√≥ximos passos sugeridos
        
        **CR√çTICO**: 
        - MANTENHA todas as refer√™ncias de imagens (![...](eda_app/charts/...)) dos outros agentes
        - N√ÉO remova ou modifique os caminhos das imagens
        - Organize o conte√∫do de forma hier√°rquica e profissional
        - Use formata√ß√£o markdown consistente
        
        O resultado deve ser um documento √∫nico e completo com TODOS os gr√°ficos incorporados.''',
        agent=conclusion_agent,
        context=[describe_task, patterns_task, outliers_task, correlation_task, custom_chart_task],
        expected_output='Um relat√≥rio final completo em markdown que incorpora TODOS os relat√≥rios dos agentes com gr√°ficos inclu√≠dos, formatado profissionalmente.'
    )

    # manager = Agent(
    # role="Project Manager",
    # goal="Coordenar a equipe eficientemente acionando os agentes necessarios de acordo com a pergunta do cliente",
    # backstory="Gerente experiente em projetos complexos de ci√™ncia de dados e data analytics",
    # allow_delegation=True,
    # reasoning=True
    # )


    # Crew
    eda_crew = Crew(
        agents=[data_describer, pattern_detector, anomaly_detector, relationship_analyzer, custom_chart_agent, conclusion_agent],
        tasks=[describe_task, patterns_task, outliers_task, correlation_task, custom_chart_task, conclusion_task],
        process="sequential",
        verbose=True,
        memory=True,
        planning=False,
        planning_llm='gpt-4o',
        #manager_agent=manager,
        long_term_memory=LongTermMemory(
        storage=LTMSQLiteStorage(
            db_path=f"{custom_storage_path}/memory.db"
            )
        )
    )

    return eda_crew 
